# ワークフローの名前
name: terrafform workflow for aws
#------------------------------------------------------
# ワークフローをトリガーするイベントを定義
#------------------------------------------------------
on:
  # 新しいコードが main ブランチに push された時にトリガー
  push:
    branches:
      - main
    # 変更がトリガーとなるファイル
    paths:
      - '.github/workflows/*'  
      - 'terraform/ec2/*.tf'
      - 'terraform/iam/*.tf'
      - 'terraform/eks/*.tf'
  # main ブランチに PR された時にトリガー
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/*'
      - 'terraform/ec2/*.tf'
      - 'terraform/iam/*.tf'
      - 'terraform/eks/*.tf'
#------------------------------------------------------
# GitHub レポジトリへの権限設定
#------------------------------------------------------
permissions:
  contents: "read"
  id-token: "write"
  issues: "write"
  pull-requests: "write"      # Pull Request へのコメントを可能にする
#------------------------------------------------------
# job（ワークフローの中で実行される処理のひとまとまり）を定義
#------------------------------------------------------
jobs:
  terraform-aws-job:                    # job ID
    name: terraform job for aws         # job 名
    runs-on: ubuntu-latest              # ジョブを実行するマシン
    #-----------------------------
    # GitHub Actions の build matrix 機能を使用して、同一ジョブを複数ディレクトリに対して並列実行
    # これにより、異なる AWS リソース（ec2, iamなど）の tf ファイルに対しての terraform 処理を並列に実行できるようになる
    #-----------------------------    
    strategy:
      matrix:
        dir:
          - terraform/aws/ec2           # AWS の EC2 インスタンスの tf ファイルを格納
          - terraform/aws/iam           # AWS の IAM の tf ファイルを格納
          - terraform/aws/eks           # AWS の EKS クラスターの tf ファイルを格納
    #-----------------------------
    # 環境変数の設定
    #-----------------------------
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}     # GitHub レポジトリへのアクセストークンを設定し、GitHub レポジトリへのコメントが可能にする / secrets は、github レポジトリの project の setting > secrets から登録する
      AWS_REGION: "us-west-2"
      TERRAFORM_DIR: ${{ matrix.dir }}              # tf ファイルの格納ディレクトリ
    #-----------------------------
    # ジョブの中で実行される一連のタスク
    #-----------------------------
    steps:
      #-----------------------------
      # ブランチを切る
      #-----------------------------
      - uses: actions/checkout@v2       # use タグで Actions（一連の定義済み処理）を指定 / actions/checkout@v2 : actions/v2 という GitHub リポジトリにあるアクションの v2 ブランチのコードを使用し、指定したリポジトリからソースコードを git checkout する
      #-----------------------------
      # tf ファイルの diff があるか確認
      #-----------------------------
      - name: Check diff for .tf files
        id: diff
        uses: technote-space/get-diff-action@v4.0.2
        with:
          PATTERNS: |
            ${{ env.TERRAFORM_DIR }}/*.tf
#      - name: Check diff for .tf files
#        id: diff
#        uses: dorny/paths-filter@v2
#        with:
#          filters: |
#            diff:
#              - '${{ env.TERRAFORM_DIR }}/**'
      #-----------------------------
      # IAM ユーザーの 認証情報を設定
      #-----------------------------
      - name: Configure aws credentials
#        if: steps.diff.outputs.diff == 'true'
        uses: aws-actions/configure-aws-credentials@v1            # configure-aws-credentials を使うことで、AWSのアクセスキーをハードコードすることなく権限を入手できる
        with:
          aws-region: ${{ env.AWS_REGION }}        
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}           # github レポジトリの [setting -> secrets -> Actions] で設定した AWS_ACCESS_KEY_ID を設定
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}   # github レポジトリの [setting -> secrets -> Actions] で設定した AWS_SECRET_ACCESS_KEY を設定
#          role-to-assume: ${{ secrets.TERRAFORM_ROLE_TO_ASSUME }}      # 
#          role-duration-seconds: 900                                   # 発行されるクレデンシャルの有効期間 
      #-----------------------------
      # terraform のインストール
      #-----------------------------
      - name: install terraform
#        if: steps.diff.outputs.diff == 'true'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.9
      #-----------------------------
      # terraform init
      #-----------------------------
      - name: terraform init
#        if: steps.diff.outputs.diff == 'true'
        run: terraform -chdir="${TERRAFORM_DIR}" init
      #-----------------------------
      # terraform plan
      #-----------------------------
      # terraform plan
      - name: terraform plan
#        if: steps.diff.outputs.diff == 'true'
        id: plan
        run: terraform -chdir="${TERRAFORM_DIR}" plan -var 'ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}' -out workspace.plan
      # PR に terraform plan の内容を投稿
      - name: post PR terraform plan
#        if: always() && steps.diff.outputs.diff == 'true' && github.event_name == 'pull_request'
        if: always() && github.event_name == 'pull_request'
        uses: robburger/terraform-pr-commenter@v1
        with:
          commenter_type: plan
          commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
          commenter_exitcode: ${{ steps.plan.outputs.exitcode }}
      #-----------------------------
      # terraform apply
      #-----------------------------
      - name: terraform apply
#        if: steps.diff.outputs.diff == 'true' && github.event_name == 'push'
        if: github.event_name == 'push'
        run: terraform -chdir="${TERRAFORM_DIR}" apply workspace.plan -var 'ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}'
